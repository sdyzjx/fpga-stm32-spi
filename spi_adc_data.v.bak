module spi_adc_data (
	//系统信号定义
	input sys_clk
	input rst_n,
	//SPI信号定义
	input I_spi_mosi,
	input I_spi_sck,
	input I_spi_cs,
	output O_spi_miso,
	//ADC信号定义
	input [12:0] ADC_IO,
	);
	
//ADC信号采样@50Mhz
reg [15:0] ADC_data_reg;
wire [11:0] ADC_data;
assign ADC_data = ADC_IO[11:0];
always @ (posedge sys_clk or negedge rst_n) begin 
	if (!rst_n)
		ADC_data_reg <= 16'd0;
	else
		ADC_data_reg <= {4'd0,ADC_data};
end

reg [12:0] wr_addr; //读地址线信号
reg [12:0] rd_addr; //写地址线信号
//捕获cs上升沿，开启传输
reg [1:0] cs_sync;
//reg [12:0] rd_cnt;
wire cs_nedge
always @(posedge clk or negedge rst_n)begin
   if(!rst_n)
      cs_sync <= 2'b11;
   else
      cs_sync <= {cs_sync[0],I_spi_cs};
end
assign cs_nedge = cs_sync[1:0] == 2'b10;
reg wr_en_flag;
reg rd_en_flag;
wire tx_done;
//读写使能控制
always @(posedge sys_clk or negedge rst_n) begin
	if (!rst_n)
		wr_en_flag <= 1'b0;
		rd_en_flag <= 1'b0;
	else if (cs_nedge)
		wr_en_flag <= 1'b1;
		rd_en_flag <= rd_en_flag;
	else if (wr_addr == 12'd1023)
		wr_en_flag <= 1'b0;
		rd_en_flag <= 1'b1;
	else if (rd_addr == 12'd1023)
		wr_en_flag <= wr_en_flag;
		rd_en_flag <= 1'b0;
	else
		wr_en_flag <= wr_en_flag;
		rd_en_flag <= rd_en_flag;
end

always @(posedge sys_clk or negedge rst_n) begin
	if (!rst_n)
		wr_addr <= 12'd0;
	else if (wr_en_flag)
		wr_addr <= wr_addr + 12'd1;
	else if (wr_addr == 12'd1023)
		wr_addr <= 12'd0;
	else
		wr_addr <= wr_addr;
end

always @ (posedge sys_clk or negedge rst_n) begin
	if (!rst_n)
		rd_addr <= 12'd0;
	else if (tx_done)
		rd_addr <= rd_addr + 1;
	else if (rd_addr == 12'd1023)
		rd_addr <= 12'd0;
	else
		rd_addr <= rd_addr;
end
wire [12:0] ram_addr;
wire [15:0] spi_data;
assign ram_addr = wr_addr & wr_en_flag | rd_addr & rd_en_flag;
wire clk_200m;

ram_1port u_ram_1port (
	.address (ram_addr),
	.clock (sys_clk),
	.data (ADC_data_reg),
	.rden (rd_en_flag),
	.wren (wr_en_flag),
	.q (spi_data),
);

spi_slave u_spi_slave (
	.clk (clk_200m),
	.rst_n (rst_n),
	.data_in (spi_data),
	.spi_sck (I_spi_sck),
	.spi_mosi (I_spi_mosi),
	.spi_cs (I_spi_cs),
	.tx_en (rd_en_flag),
	.spi_miso (O_spi_miso),
	.tx_done (tx_done)
);

pll u_pll (
	.inclk0 (sys_clk),
	.c0 (clk_200m)
);